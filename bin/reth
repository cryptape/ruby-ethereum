#!/usr/bin/env ruby

$:.unshift File.expand_path('../../lib', __FILE__)

require 'ethereum/app/full'

#Ethereum::Logger.level = :debug

class Reth
  include Ethereum

  Services = [
    App::DBService,
    App::AccountService,
    DEVp2p::Discovery::Service,
    DEVp2p::PeerManager
  ].freeze

  attr :app, :config

  def initialize
    load_config

    Celluloid.boot
    @app = App::Full.new(@config)
  end

  def load_config
    App::Config.setup
    @config = App::Config.load

    puts_header 'CONFIGURATION'
    puts @config.to_hash
  end

  def register_services
    if Services.include?(App::AccountService)
      App::AccountService.register_with_app app
      # TODO: unlock_accounts
      begin
        app.services.accounts.coinbase
      rescue Ethereum::ValueError => e
        logger.fatal 'invalid coinbase', coinbase: (config.pow || {})[:coinbase_hex]
        exit 1
      end
    end

    exclude_services = @app.config[:deactivated_services] + [App::AccountService.name]
    Services.each do |service|
      raise ArgumentError, 'service must be BaseService' unless service.instance_of?(Class) && service < DEVp2p::BaseService

      next if exclude_services.include?(service.name)
      service.register_with_app @app
    end
  end

  def start
    register_services

    puts_header "starting"
    @app.start

    #trap("INT")  { @app.stop }
    #trap("TERM") { @app.stop }
    #trap("QUIT") { @app.stop }

    #10000.times do |i|
    #  sleep 2
    #  @app.services.db.put i.to_s, Time.now.to_s
    #  @app.services.db.commit
    #end

    @app.join
  end

  private

  def puts_header(text)
    puts "\n>>>>> #{text}"
  end
end

Reth.new.start

